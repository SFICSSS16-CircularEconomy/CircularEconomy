

;; main



to go
  
  ; reset previous step overlaps and utilities
  reset-utility-vars
  
  ; get the currently contracting company
  set prospecting-company get-prospecting-company
  
  let buyer nobody let seller nobody
  ask prospecting-company [
   
    ; get potential partners
    let potential-partners get-potential-partners
    
    if potential-partners != nobody [
      ask potential-partners [compute-utilities (distance myself)]
      
      ; trades for output and input
      ;;  - choice between selling and buying -
      let max-output-utility max [current-input-utility] of potential-partners
      let max-input-utility max [current-output-utility] of potential-partners 
    
      ifelse max-output-utility > max-input-utility [
        if max-output-utility > 0 [
          set seller self set buyer one-of potential-partners with-max [current-input-utility] 
          set current-output-utility [current-input-utility] of buyer set current-output-overlap [current-input-overlap] of buyer
        ]
      ][
        if max-input-utility > 0 [
          set buyer self set seller one-of potential-partners with-max [current-output-utility]
          set current-input-utility [current-output-utility] of seller set current-input-overlap [current-output-overlap] of seller
        ]
      ]
    ]
  ]
  
  ; make trade if effective buyer and/or seller. Note : should put this check inside make-trade function ?
  if seller != nobody and buyer != nobody [
    make-trade seller buyer
  ]
  
  tick
  
  save-variables
  
  if stop-criteria? [stop]
  
end



;;
;  when to stop network growth
;
;  t >= tf or total-waste < alpha * #-companies 
;  or no new links ? not sure because can pick a guy and nothing happens (rq : algo not blocked as random at each step)
;   - delta-waste very small ? -> cumulated delta-waste very small <-
to-report stop-criteria?
  if length waste-history < 100 [report false]
  ; else compute the âˆ†waste
  let wq  (sublist waste-history (length waste-history - 100) length waste-history)
  let s 0 let i 0 foreach but-first wq [set s s + (? - item i wq) set i i + 1] set s s / length but-first wq
  ;output-print s ; DEBUG
  report abs s < (#-companies / 1000)
end




to save-variables
  set waste-history lput total-waste waste-history
end


